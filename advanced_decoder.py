#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import json
import base64
from urllib.parse import unquote

def extract_string_array(js_code):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–∑ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    """
    print("=== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ ===\n")
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é _0x4941, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    array_match = re.search(r"function _0x4941\(\)\s*\{\s*const _0x[a-f0-9]+=\s*(\[.*?\]);", js_code, re.DOTALL)
    
    if array_match:
        array_content = array_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        strings = re.findall(r"'([^']*)'", array_content)
        
        print(f"‚úì –ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫: {len(strings)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        decoded_strings = []
        for s in strings:
            try:
                decoded = s.encode().decode('unicode_escape')
                decoded_strings.append(decoded)
            except:
                decoded_strings.append(s)
        
        return decoded_strings
    
    return []

def analyze_functionality(strings):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫
    """
    print("\n=== –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ===\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        'UI_Elements': [],
        'API_Endpoints': [],
        'Error_Messages': [],
        'Success_Messages': [],
        'Form_Fields': [],
        'URLs': [],
        'Facebook_Related': [],
        'Currencies': [],
        'Timezones': [],
        'Countries': []
    }
    
    for s in strings:
        if not s or len(s) < 2:
            continue
            
        s_lower = s.lower()
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        if any(word in s_lower for word in ['button', 'div', 'span', 'input', 'select', 'option', 'form']):
            categories['UI_Elements'].append(s)
        
        # API endpoints
        elif s.startswith('/') and len(s) > 3:
            categories['API_Endpoints'].append(s)
        
        # URL
        elif s.startswith(('http', 'https')):
            categories['URLs'].append(s)
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        elif any(word in s_lower for word in ['error', 'failed', 'invalid', 'wrong']):
            categories['Error_Messages'].append(s)
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
        elif any(word in s_lower for word in ['success', 'complete', 'created', 'done']):
            categories['Success_Messages'].append(s)
        
        # Facebook —Å–≤—è–∑–∞–Ω–Ω—ã–µ
        elif any(word in s_lower for word in ['facebook', 'graph', 'fb', 'adaccount']):
            categories['Facebook_Related'].append(s)
        
        # –í–∞–ª—é—Ç—ã
        elif re.match(r'^[A-Z]{3}$', s) or any(word in s_lower for word in ['dollar', 'euro', 'pound', 'yen']):
            categories['Currencies'].append(s)
        
        # –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        elif 'gmt' in s_lower or '/gmt' in s_lower or 'timezone' in s_lower:
            categories['Timezones'].append(s)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        elif any(word in s for word in ['name=', 'value=', 'id=', 'class=']):
            categories['Form_Fields'].append(s)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for category, items in categories.items():
        if items:
            print(f"üìÇ {category.replace('_', ' ')}: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            for item in items[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {item}")
            if len(items) > 5:
                print(f"   ... –∏ –µ—â–µ {len(items) - 5}")
            print()

def extract_key_functionality(js_code, strings):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    """
    print("=== –ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ===\n")
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    create_functions = []
    for i, s in enumerate(strings):
        if 'create' in s.lower() and ('account' in s.lower() or 'ad' in s.lower()):
            create_functions.append((i, s))
    
    if create_functions:
        print("üîß –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
        for idx, func in create_functions:
            print(f"   [{idx}] {func}")
        print()
    
    # –ò—â–µ–º URL-—ã API
    api_urls = [s for s in strings if 'graph.facebook' in s or 'api' in s.lower()]
    if api_urls:
        print("üåê API URLs:")
        for url in api_urls:
            print(f"   - {url}")
        print()
    
    # –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞
    access_related = [s for s in strings if any(word in s.lower() for word in ['token', 'access', 'key', 'auth'])]
    if access_related:
        print("üîë –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞:")
        for param in access_related[:10]:
            print(f"   - {param}")
        print()
    
    # –ò—â–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
    business_logic = [s for s in strings if any(word in s.lower() for word in ['business', 'manager', 'advertiser'])]
    if business_logic:
        print("üíº –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞:")
        for logic in business_logic:
            print(f"   - {logic}")
        print()

def decode_hex_strings(js_code):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç hex-—Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–¥–µ
    """
    print("=== –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ hex-—Å—Ç—Ä–æ–∫ ===\n")
    
    hex_matches = re.findall(r'\\x([0-9a-fA-F]{2})', js_code)
    if hex_matches:
        print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ hex-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(hex_matches)}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
        try:
            hex_bytes = bytes([int(h, 16) for h in hex_matches[:100]])  # –ø–µ—Ä–≤—ã–µ 100
            decoded_text = hex_bytes.decode('utf-8', errors='ignore')
            if decoded_text.strip():
                print(f"üìù –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ñ—Ä–∞–≥–º–µ–Ω—Ç):")
                print(f"   {decoded_text[:200]}...")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å hex: {e}")

def generate_readable_summary(strings):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ —Ä–µ–∑—é–º–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    """
    print("\n" + "="*60)
    print("                –†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê")
    print("="*60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å
    print("\nüéØ –û–°–ù–û–í–ù–ê–Ø –¶–ï–õ–¨:")
    if any('adaccount' in s.lower() for s in strings):
        print("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Facebook/Meta")
    
    if any('business' in s.lower() for s in strings):
        print("   ‚úì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    print("\n‚öôÔ∏è –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê:")
    capabilities = []
    
    if any('currency' in s.lower() for s in strings):
        capabilities.append("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª—é—Ç")
    
    if any('timezone' in s.lower() for s in strings):
        capabilities.append("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")
    
    if any('create' in s.lower() and 'account' in s.lower() for s in strings):
        capabilities.append("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    if any('token' in s.lower() for s in strings):
        capabilities.append("–†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
    
    for cap in capabilities:
        print(f"   ‚úì {cap}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
    print("   üö´ –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Facebook")
    print("   üö´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print("   üö´ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π")
    print("   üö´ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–µ—Ä–∞
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open('/workspace/AKR ad account create bookmark tools.txt', 'r', encoding='utf-8') as f:
            js_code = f.read().strip()
        
        print("üîç –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó AKR AD ACCOUNT TOOL")
        print("="*60)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        strings = extract_string_array(js_code)
        
        if strings:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            analyze_functionality(strings)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            extract_key_functionality(js_code, strings)
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º hex-—Å—Ç—Ä–æ–∫–∏
            decode_hex_strings(js_code)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            generate_readable_summary(strings)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open('/workspace/detailed_analysis.json', 'w', encoding='utf-8') as f:
                analysis_data = {
                    'tool_type': 'Facebook Ad Account Creation Bookmarklet',
                    'strings_count': len(strings),
                    'decoded_strings': strings[:500],  # –ø–µ—Ä–≤—ã–µ 500 —Å—Ç—Ä–æ–∫
                    'analysis_date': '2024',
                    'warnings': [
                        '–ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å ToS Facebook',
                        '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ',
                        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫'
                    ]
                }
                json.dump(analysis_data, f, ensure_ascii=False, indent=2)
            
            print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ detailed_analysis.json")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()