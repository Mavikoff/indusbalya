#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import json
import html
from urllib.parse import unquote

def decode_javascript_bookmarklet(js_code):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript –∫–æ–¥
    """
    print("=== –ê–Ω–∞–ª–∏–∑ JavaScript –∫–æ–¥–∞ ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–¥ —Å javascript:
    if js_code.startswith('javascript:'):
        js_code = js_code[11:]  # –£–±–∏—Ä–∞–µ–º javascript: –ø—Ä–µ—Ñ–∏–∫—Å
        print("‚úì –ù–∞–π–¥–µ–Ω JavaScript –±—É–∫–º–∞—Ä–∫–ª–µ—Ç")
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞
    print("\n=== –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ===")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å URL
    urls = re.findall(r'https?://[^\s\'"]+', js_code)
    if urls:
        print(f"\nüîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ URLs:")
        for url in set(urls):
            print(f"  - {url}")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã
    encoded_strings = re.findall(r'_0x[a-f0-9]+\([^)]+\)', js_code)
    print(f"\nüî§ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(set(encoded_strings))}")
    
    # –ò—â–µ–º –º–∞—Å—Å–∏–≤—ã —Å—Ç—Ä–æ–∫
    string_arrays = re.findall(r'\[([^\]]*[\'"][^\]]*)\]', js_code)
    if string_arrays:
        print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Å–∏–≤–æ–≤ —Å—Ç—Ä–æ–∫: {len(string_arrays)}")
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        if string_arrays:
            first_array = string_arrays[0]
            strings = re.findall(r"'([^']*)'", first_array)
            if strings:
                print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–ø–µ—Ä–≤—ã–µ 10):")
                for i, s in enumerate(strings[:10]):
                    if s:  # —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        try:
                            # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                            decoded = s.encode().decode('unicode_escape')
                            print(f"  {i+1}. {decoded}")
                        except:
                            print(f"  {i+1}. {s}")
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
    obfus_functions = re.findall(r'function\s+_0x[a-f0-9]+\([^{]+\{[^}]+\}', js_code)
    print(f"\n‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {len(obfus_functions)}")
    
    # –ò—â–µ–º –¥–æ–º–µ–Ω—ã –∏ endpoints
    domains = re.findall(r'[a-zA-Z0-9.-]+\.(?:com|org|net|ru|facebook|graph|api)', js_code)
    if domains:
        print(f"\nüåê –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã:")
        for domain in set(domains):
            if len(domain) > 3:  # –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                print(f"  - {domain}")
    
    # –ò—â–µ–º API endpoints
    api_endpoints = re.findall(r'/[a-zA-Z_][a-zA-Z0-9_/]*', js_code)
    interesting_endpoints = [ep for ep in set(api_endpoints) if len(ep) > 3 and 'adaccount' in ep.lower()]
    if interesting_endpoints:
        print(f"\nüîå –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ API endpoints:")
        for endpoint in interesting_endpoints:
            print(f"  - {endpoint}")
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    account_related = re.findall(r'[a-zA-Z_]*[Aa]ccount[a-zA-Z_]*|[a-zA-Z_]*[Cc]reate[a-zA-Z_]*', js_code)
    if account_related:
        print(f"\nüë§ –¢–µ—Ä–º–∏–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:")
        for term in set(account_related):
            if len(term) > 3:
                print(f"  - {term}")
    
    # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–æ–∫–µ–Ω—ã
    tokens_params = re.findall(r'(?:token|access|key|id)[\w_]*', js_code, re.IGNORECASE)
    if tokens_params:
        print(f"\nüîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤/–∫–ª—é—á–µ–π:")
        for param in set(tokens_params):
            print(f"  - {param}")
    
    return js_code

def extract_readable_strings(js_code):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–¥–∞
    """
    print("\n\n=== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫ ===")
    
    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    strings = re.findall(r"'([^']*)'|\"([^\"]*)\"", js_code)
    readable_strings = []
    
    for s1, s2 in strings:
        s = s1 or s2
        if s and len(s) > 3:  # —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
            try:
                decoded = s.encode().decode('unicode_escape')
                if any(char.isalpha() for char in decoded):  # —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã
                    readable_strings.append(decoded)
            except:
                if any(char.isalpha() for char in s):
                    readable_strings.append(s)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    readable_strings = sorted(set(readable_strings))
    
    print(f"\nüìñ –ù–∞–π–¥–µ–Ω–æ —á–∏—Ç–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫: {len(readable_strings)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    urls = [s for s in readable_strings if s.startswith(('http', 'https', '/'))]
    ui_elements = [s for s in readable_strings if any(word in s.lower() for word in ['button', 'div', 'span', 'input', 'select', 'option'])]
    messages = [s for s in readable_strings if any(word in s.lower() for word in ['error', 'success', 'create', 'account', 'complete'])]
    
    if urls:
        print(f"\nüîó URLs –∏ –ø—É—Ç–∏ ({len(urls)}):")
        for url in urls[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  - {url}")
    
    if ui_elements:
        print(f"\nüé® UI —ç–ª–µ–º–µ–Ω—Ç—ã ({len(ui_elements)}):")
        for elem in ui_elements[:10]:
            print(f"  - {elem}")
    
    if messages:
        print(f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è ({len(messages)}):")
        for msg in messages[:10]:
            print(f"  - {msg}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    """
    try:
        with open('/workspace/AKR ad account create bookmark tools.txt', 'r', encoding='utf-8') as f:
            js_code = f.read().strip()
        
        print("AKR Ad Account Creation Tool - Decoder")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
        decoded_code = decode_javascript_bookmarklet(js_code)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Ç–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏
        extract_readable_strings(js_code)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
        with open('/workspace/decoded_analysis.txt', 'w', encoding='utf-8') as f:
            f.write("=== –ê–ù–ê–õ–ò–ó AKR AD ACCOUNT CREATION TOOL ===\n\n")
            f.write("–≠—Ç–æ JavaScript –±—É–∫–º–∞—Ä–∫–ª–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ AKR.\n")
            f.write("–ö–æ–¥ —Å–∏–ª—å–Ω–æ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n")
            f.write("–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å\n")
            f.write("—É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!\n\n")
            f.write("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:\n")
            f.write("-" * 50 + "\n")
            f.write(js_code)
        
        print(f"\n\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: decoded_analysis.txt")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main()